{"version":3,"sources":["webpack:///ClientApp/environments/environment.prod.ts","webpack:///ClientApp/environments/environment.ts","webpack:///ClientApp/app/app.component.ts","webpack:///ClientApp/app/app.component.html","webpack:///ClientApp/app/app.module.ts","webpack:///ClientApp/app/app-routing.module.ts","webpack:///ClientApp/main.ts","webpack:///ClientApp/app/calculator/http-service.ts","webpack:///ClientApp/app/calculator/monthly-premium.component.ts","webpack:///ClientApp/app/calculator/monthly-premium.component.html","webpack:///$_lazy_route_resource lazy namespace object"],"names":["environment","production","baseUrl","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","routes","AppRoutingModule","forRoot","exports","bootstrapModule","err","console","error","HttpService","http","get","pipe","data","log","JSON","stringify","handleError","errorMessage","ErrorEvent","message","status","body","providedIn","MonthlyPremiumComponent","formBuilder","httpService","pageTitle","submitted","occupationRatingFactorList","premiumCalculatorForm","group","fullName","dob","required","age","occupation","sumInsured","min","getRatingFactorByOccupation","valid","calculatePremium","dateofBirth","dateRange","Date","minDate","maxDate","getAgeFromDateOfBirth","patchValue","dateOfBirth","value","deathSumInsured","InsurancePremiumParams","occupationRatingFactor","premiumAmount","getMonthlyPremium","now","birthDate","timeDiff","Math","abs","getTime","parseFloat","toFixed","insurancePremiumParams","monthlyPremium","subscribe","controls","onSubmit","onDateOfBirthChange","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["export const environment = {\n    production: true,\n    baseUrl: 'http://localhost:5000/api/resource/ratingfactor'\n};\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n    baseUrl: 'http://localhost:5000/api/resource/ratingfactor'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'TAL Insurance Premium Calculator';\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MonthlyPremiumComponent } from './calculator/monthly-premium.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MonthlyPremiumComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [MonthlyPremiumComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment.prod';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class HttpService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    get<T>(): Observable<T> {\r\n        return this.http.get<T>(environment.baseUrl)\r\n            .pipe(\r\n                tap(data => console.log(JSON.stringify(data))),\r\n                catchError(this.handleError)\r\n            );\r\n    }\r\n\r\n    private handleError(err): Observable<never> {\r\n        let errorMessage: string;\r\n        if (err.error instanceof ErrorEvent) {\r\n            errorMessage = `An error occurred: ${err.error.message}`;\r\n        } else {\r\n            errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\r\n        }\r\n        console.error(err);\r\n        return throwError(errorMessage);\r\n    }\r\n}","import { Component, OnInit } from '@angular/core'\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'\nimport { CalculatorInput } from '../model/calculator-input';\nimport { OccupationFactor } from '../model/occupation-factor';\nimport { HttpService } from './http-service';\n\n@Component({\n    selector: 'app-monthly-premium',\n    templateUrl: './monthly-premium.component.html',\n    styleUrls: ['./monthly-premium.component.css']\n})\nexport class MonthlyPremiumComponent implements OnInit {\n    pageTitle = 'Premium Calculator';\n    errorMessage = '';\n\n    premiumCalculatorForm: FormGroup;\n    submitted = false;\n    premiumAmount: number\n    occupationRatingFactorList: OccupationFactor[] = []\n\n    constructor(private formBuilder: FormBuilder,\n        private httpService: HttpService) { }\n\n    ngOnInit() {\n        this.premiumCalculatorForm = this.formBuilder.group({\n            fullName: [''],\n            dob: ['', Validators.required],\n            age: [''],\n            occupation: ['', Validators.required],\n            sumInsured: ['', [Validators.required, Validators.min(1)]]\n        });\n        this.getRatingFactorByOccupation();\n    }\n\n    get f() { return this.premiumCalculatorForm.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n        if (this.premiumCalculatorForm.valid) {\n            this.calculatePremium()\n        }\n    }\n\n    onDateOfBirthChange(dateofBirth: string): void {\n        if (dateofBirth) {\n            let dateRange = new Date(dateofBirth);\n            let minDate = new Date('1900-01-01')\n            let maxDate = new Date('2021-02-01')\n\n            if (dateRange > minDate && dateRange < maxDate) {\n                let age = this.getAgeFromDateOfBirth(dateofBirth)\n                this.premiumCalculatorForm.patchValue({ age: age })\n            }\n            else {\n                this.premiumCalculatorForm.patchValue({ dob: null })\n                this.premiumCalculatorForm.patchValue({ age: null })\n            }\n        }\n    }\n\n    calculatePremium(): void {\n        if (this.premiumCalculatorForm.valid) {\n            let dateOfBirth = this.premiumCalculatorForm.get('dob').value;\n            let occupation = this.premiumCalculatorForm.get('occupation').value;\n            let deathSumInsured = this.premiumCalculatorForm.get('sumInsured').value;\n\n            if (dateOfBirth && occupation && deathSumInsured) {\n                let InsurancePremiumParams = {} as CalculatorInput;\n                let dateofBirth = this.premiumCalculatorForm.get('dob').value\n                InsurancePremiumParams.age = +this.getAgeFromDateOfBirth(dateofBirth)\n                InsurancePremiumParams.occupationRatingFactor = +this.premiumCalculatorForm.get('occupation').value\n                InsurancePremiumParams.deathSumInsured = +this.premiumCalculatorForm.get('sumInsured').value\n\n                this.premiumAmount = this.getMonthlyPremium(InsurancePremiumParams)\n            }\n            else\n                this.premiumAmount = null\n        }\n    }\n\n    getAgeFromDateOfBirth(dob: string): number {\n        var now = new Date();\n        var birthDate = new Date(dob);\n        var timeDiff = Math.abs(now.getTime() - birthDate.getTime());\n        var age = parseFloat((timeDiff / (1000 * 3600 * 24 * 365)).toFixed(2));\n        return age;\n    }\n\n    getMonthlyPremium(insurancePremiumParams: CalculatorInput): number {\n        const monthlyPremium: number = parseFloat(((insurancePremiumParams.deathSumInsured *\n            insurancePremiumParams.occupationRatingFactor * insurancePremiumParams.age) / (1000 * 12)).toFixed(2));\n        return monthlyPremium;\n    }\n\n    getRatingFactorByOccupation(): void {\n        this.httpService.get<OccupationFactor[]>()\n            .subscribe((data: OccupationFactor[]) => {\n                this.occupationRatingFactorList = data\n            });\n    }\n}\n","<div class=\"container w-50 p-3\">\r\n    <div class=\"form-group row\">\r\n        <div>\r\n            <b>Monthly Premium Amount Calculator</b>\r\n            <hr>\r\n            <div class=\"col\" *ngIf=\"premiumAmount > 0\">\r\n                <b>\r\n                    Calculated Premium\r\n                    {{premiumAmount |currency:'AUD':'symbol'}}\r\n                </b>\r\n            </div>\r\n\r\n            <form [formGroup]=\"premiumCalculatorForm\" (ngSubmit)=\"onSubmit()\">\r\n\r\n                <div class=\"form-group row\">\r\n                    <label for=\"description\" class=\"col-sm-5 col-form-label\">\r\n                        Name\r\n                    </label>\r\n                    <div class=\"col-sm-7\">\r\n                        <input type=\"text\" formControlName=\"fullName\" class=\"form-control\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-group row\">\r\n                    <label for=\"description\" class=\"col-sm-5 col-form-label\">\r\n                        Date of Birth\r\n                    </label>\r\n                    <div class=\"col-sm-7\">\r\n                        <input type=\"date\" formControlName=\"dob\" class=\"form-control\"\r\n                               min=\"1900-01-01\" max=\"2021-12-31\"\r\n                               (blur)=\"onDateOfBirthChange($event.target.valueAsDate)\"\r\n                               [ngClass]=\"{ 'is-invalid': submitted && f.dob.errors }\" />\r\n                        <div *ngIf=\"submitted && f.dob.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.dob.errors.required\">Date of birth is required</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-group row\">\r\n                    <label for=\"description\" class=\"col-sm-5 col-form-label\">\r\n                        Age\r\n                    </label>\r\n                    <div class=\"col-sm-7\">\r\n                        <input type=\"number\" formControlName=\"age\" class=\"form-control\" readonly />\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-group row\">\r\n                    <label for=\"description\" class=\"col-sm-5 col-form-label\">\r\n                        Occupation\r\n                    </label>\r\n                    <div class=\"col-sm-7\">\r\n                        <select formControlName=\"occupation\" class=\"form-control\" (change)=\"calculatePremium()\"\r\n                                [ngClass]=\"{ 'is-invalid': submitted && f.occupation.errors }\">\r\n                            <option [ngValue]=\"null\" disabled>Select Occupation</option>\r\n                            <option *ngFor=\"let occupation of occupationRatingFactorList\" [value]=\"occupation.factor\">\r\n                                {{occupation.name}}\r\n                            </option>\r\n                        </select>\r\n                        <div *ngIf=\"submitted && f.occupation.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.occupation.errors.required\">Occupation is required</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-group row\">\r\n                    <label for=\"description\" class=\"col-sm-5 col-form-label\">\r\n                        Sum Insured\r\n                    </label>\r\n                    <div class=\"col-sm-7\">\r\n                        <input type=\"number\" formControlName=\"sumInsured\" class=\"form-control\"\r\n                               [ngClass]=\"{ 'is-invalid': submitted && f.sumInsured.errors }\" />\r\n                        <div *ngIf=\"submitted && f.sumInsured.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"f.sumInsured.errors.required\">Sum Insured is required</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-group row\">\r\n                    <div class=\"col-sm-5\"></div>\r\n                    <div class=\"col-sm-7\">\r\n                        <button class=\"btn btn-success btn-md\">\r\n                            Calculate Premium\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}